@startuml
skinparam classAttributeIconSize 0
left to right direction

class Platform {
  -String designation
  +agendNotification()
  +getDelay()
  +getIntervalo()
  +getRegistoFreelancer()
}

class ListDelay {
  +addDelay(taskDelay)
  +getDelayListSize()
}

class ListFreelancerToNotify {
  +addFreelancer(email) 
}

class RegisterFreelancer{
  +getListFreelancerToNotify() 
}

abstract Timer {
  +run()
  +schedule(delay,intervalo)
}

class NotifyFreelancerTask {
  +run() 
}

class Organization {
  -String name
}

class Freelancer {
  -String id
  -String name
  -String expertiseLevel
  -String email
  -String NIF
  -String IBAN
  -String address
  -String country
  +getEmailByFreelancer()
  +newDelyaList()
  +addDelay(taskDelay)
  +getOverallDelay(listDelay,size)
  +getTaskLstSize()
  calculatePerc(size,taskLstSize)
  }

class Task {
 -String id
 -String briefDescription
 -Integer timeDuration
 -Double costPerHour
 -String taskCategory
  +getTaskDelay()
}

class TaskExecution {
 -Date endDate
 -Double delay
 -String workQualityDescription
  +getDelay()
}

class PaymentTransaction{
}

class PaymentDay {
  -Date timeOfDay
  -Date dayOfMonth
}

Platform "1" -- "*" Organization : has registered >
Platform "1" -- "1" NotifyFreelancerTask : has>
Platform "1" -- "1" RegisterFreelancer : has >

NotifyFreelancerTask  --  Timer 

Freelancer "1" -- "1" ListDelay : has >

RegisterFreelancer "1" -- "1" ListFreelancerToNotify : has >
RegisterFreelancer "1" -- "1..*" Freelancer : has >

Organization "1" -- "*" Task: has >
Organization "1" -- "*" PaymentTransaction: has >

PaymentTransaction "1" -- "1" Freelancer: is related to >
PaymentTransaction "1" -- "1" Task: is related to >
PaymentTransaction "1" -- "1" TaskExecution: is related to >

TaskExecution "1..*" -- "1..*" Freelancer : is related to >

Task "1" -- "1" TaskExecution: has >
Task "1..*" -- "1" Freelancer: assigned >

PaymentDay "1" -- "0..*" PaymentTransaction : is related to


@enduml